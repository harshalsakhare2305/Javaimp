class Solution {
    public void mark_parents(TreeNode root,Map<TreeNode,TreeNode> parent,TreeNode target){
           Queue<TreeNode> q =new LinkedList<>();
           if(root==null){
               return;
           }
         q.add(root);

         while(!q.isEmpty()){
             TreeNode curr=q.poll();
             if(curr.left !=null){
                 parent.put(curr.left,curr);
                 q.add(curr.left);
             }

             if(curr.right !=null){
                 parent.put(curr.right,curr);
                 q.add(curr.right);
             }
         }
    }

    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> ans =new ArrayList<>();
        Map<TreeNode,TreeNode> parent =new HashMap<>();
        mark_parents(root,parent,target);
        Map<TreeNode,Boolean> visited =new HashMap<>();
        Queue<TreeNode> q =new LinkedList<>();
        visited.put(target,true);
        q.offer(target);
        int curr_val =0;

        while(!q.isEmpty()){
            int size =q.size();
            if(curr_val==k) break;
            curr_val++;

            for(int i=0;i<size;i++){
                TreeNode curr =q.poll();

                if(curr.left!=null && visited.get(curr.left)==null){
                    q.offer(curr.left);
                    visited.put(curr.left,true);
                }

                if(curr.right!=null && visited.get(curr.right)==null){
                    q.offer(curr.right);
                    visited.put(curr.right,true);
                }

                if(parent.get(curr)!=null && visited.get(parent.get(curr))==null){
                    q.offer(parent.get(curr));
                    visited.put(parent.get(curr),true);
                }

            }
        }

        while(!q.isEmpty()){
            ans.add(q.poll().val);
        }


        return ans;
        

    }
}
